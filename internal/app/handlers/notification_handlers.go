package handlers

import (
	"fmt"
	"regexp"
	"time"
	"weather-bot/internal/app/jobs"
	"weather-bot/internal/app/reply"
	"weather-bot/internal/app/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/rs/zerolog/log"
)

func handleTimeInput(ctx *Context) {

	switch ctx.text {
	case "‚Ü© –û—Ç–º–µ–Ω–∞":
		ctx.user.State = string(StateNone)
		reply.Send().Message(ctx.user.ChatID, "–û—Ç–º–µ–Ω–µ–Ω–æ.", mainMenu())
		return
	case "‚ùå –£–¥–∞–ª–∏—Ç—å":
		ctx.user.State = string(StateNone)
		err := services.Global().RemoveUserNotification(ctx.user.TgID)
		if err != nil {
			log.Error().Err(err).Int64("user", ctx.user.TgID).Msg("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
			reply.Send().Message(ctx.user.ChatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.", mainMenu())
		} else {
			reply.Send().Message(ctx.user.ChatID, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", mainMenu())
		}
		return
	case "‚úè –ò–∑–º–µ–Ω–∏—Ç—å":
		reply.Send().Message(ctx.user.ChatID, enterNotificationTimeMessage(), tgbotapi.NewRemoveKeyboard(true))
		return
	}

	if isValidTime(ctx.text) {
		// –ü–∞—Ä—Å–∏–º `HH:MM` –≤ `time.Time`
		notifTime, err := time.Parse("15:04", ctx.text)
		if err != nil {
			log.Error().Err(err).Int64("user", ctx.user.TgID).Time("notification time", notifTime).Msgf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: %s", ctx.text)
		}
		err = jobs.ScheduleUserUpdate(ctx.user.TgID, notifTime)
		if err != nil {
			log.Error().Err(err).Int64("user", ctx.user.TgID).Msg("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		}
		log.Info().Int64("user", ctx.user.TgID).Msgf("–í—Ä–µ–º—è %s –¥–ª—è —é–∑–µ—Ä–∞ %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", ctx.text, ctx.user.Name)
		ctx.user.State = string(StateNone)
		reply.Send().Message(ctx.user.ChatID, fmt.Sprintf("üéâ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–≤—Ç—Ä–∞ –≤ %s –≤–∞–º –ø—Ä–∏–¥–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.", ctx.text), mainMenu())

	} else {
		reply.Send().Message(ctx.user.ChatID, "‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑.", tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚Ü© –û—Ç–º–µ–Ω–∞"))))
	}

}

func isValidTime(input string) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–∫—É "HH:MM"
	matched, err := regexp.MatchString(`^([01]\d|2[0-3]):([0-5]\d)$`, input)
	if err != nil {
		log.Error().Err(err).Str("notification time", input).Msg("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")
		return false
	}
	return matched
}
