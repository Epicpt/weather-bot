package handlers

import (
	"fmt"
	"strconv"
	"time"
	"weather-bot/internal/app/reply"
	"weather-bot/internal/app/services"
	"weather-bot/internal/app/weather"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/rs/zerolog/log"
)

// UserState –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥–µ
type UserState string

const (
	StateNone                  UserState = "none"
	StateAwaitingCityInput     UserState = "awaiting_city_input"
	StateAwaitingCitySelection UserState = "awaiting_city_selection"
	StateAwaitingTimeInput     UserState = "awaiting_time_input"
)

func processMessage(ctx *Context) {

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	switch UserState(ctx.user.State) {
	case StateNone:
		handleDefaultState(ctx)
	case StateAwaitingCityInput:
		handleCityInput(ctx)
	case StateAwaitingCitySelection:
		handleCitySelection(ctx)
	case StateAwaitingTimeInput:
		handleTimeInput(ctx)
	default:
		handleUnknownState(ctx)
	}
}

func handleDefaultState(ctx *Context) {
	switch ctx.text {
	case "/start":
		ctx.user.State = string(StateAwaitingCityInput)
		reply.Send().Message(ctx.user.ChatID, startMessage(), tgbotapi.NewRemoveKeyboard(true))
	case "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", "/weather":
		forecast, err := weather.Get(ctx.user.CityID)
		if err != nil {
			log.Error().Err(err).Int64("user", ctx.user.TgID).Str("cityID", ctx.user.City).Msg("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã")
			reply.Send().Message(ctx.user.ChatID, errorGetWeatherMessage(), mainMenu())
			return
		}
		today := time.Now().UTC().Format("2006-01-02")
		msg := weather.FormatDailyForecast(ctx.user.City, forecast.FullDay[today])
		reply.Send().Message(ctx.user.ChatID, msg, mainMenu())

		if ctx.user.Sticker {
			sticker := weather.Sticker(forecast.FullDay[today])
			reply.Send().Sticker(ctx.user.ChatID, sticker)
		}
	case "/weather5":
		forecast, err := weather.Get(ctx.user.CityID)
		if err != nil {
			log.Error().Err(err).Int64("user", ctx.user.TgID).Str("cityID", ctx.user.City).Msg("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã")
			reply.Send().Message(ctx.user.ChatID, errorGetWeatherMessage(), mainMenu())
			return
		}
		msg := weather.FormatFiveDayForecast(ctx.user.City, forecast.ShortDays)
		reply.Send().Message(ctx.user.ChatID, msg, mainMenu())
	case "/city":
		ctx.user.State = string(StateAwaitingCityInput)
		reply.Send().Message(ctx.user.ChatID, enterNameCityMessage(), tgbotapi.NewRemoveKeyboard(true))
	case "/notifications":
		existingTime, err := services.Global().GetUserNotificationTime(ctx.user.TgID)
		if err != nil {
			log.Error().Err(err).Int64("user", ctx.user.TgID).Msg("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
			reply.Send().Message(ctx.user.ChatID, "üò¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.", mainMenu())
			return
		}

		ctx.user.State = string(StateAwaitingTimeInput)
		if existingTime != "" {
			// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å
			existingTime, err := strconv.ParseInt(existingTime, 10, 64)
			if err != nil {
				log.Error().Err(err).Int64("existing time", existingTime).Msg("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ existingTime")
			}
			msg := fmt.Sprintf("‚ùî –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ %s.\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?", time.Unix(existingTime, 0).Format("15:04"))
			reply.Send().Message(ctx.user.ChatID, msg, notificationMenu())
		} else {
			// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
			reply.Send().Message(ctx.user.ChatID, enterNotificationTimeMessage(), tgbotapi.NewRemoveKeyboard(true))
		}
	case "/stickers":
		if ctx.user.Sticker {
			ctx.user.Sticker = false
			reply.Send().Message(ctx.user.ChatID, "–°—Ç–∏–∫–µ—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå", mainMenu())
		} else {
			ctx.user.Sticker = true
			reply.Send().Message(ctx.user.ChatID, "–°—Ç–∏–∫–µ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ", mainMenu())
		}

	default:
		reply.Send().Message(ctx.user.ChatID, "ü§∑‚Äç‚ôÄÔ∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.", mainMenu())
	}
}

func handleUnknownState(ctx *Context) {
	ctx.user.State = string(StateNone)
	reply.Send().Message(ctx.user.ChatID, "üîÑ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.", startMenu())
}
