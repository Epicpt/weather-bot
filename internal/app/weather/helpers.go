package weather

import (
	"time"
	"weather-bot/internal/models"

	"github.com/briandowns/openweathermap"
)

var weatherMapping = map[int]string{
	200: "–ì—Ä–æ–∑–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–∂–¥—ë–º", 201: "–ì—Ä–æ–∑–∞ —Å –¥–æ–∂–¥—ë–º", 202: "–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥—ë–º",
	210: "–ù–µ–±–æ–ª—å—à–∞—è –≥—Ä–æ–∑–∞", 211: "–ì—Ä–æ–∑–∞", 212: "–°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞", 221: "–ú–µ—Å—Ç–∞–º–∏ –≥—Ä–æ–∑–∞", 230: "–ì—Ä–æ–∑–∞ —Å –ª—ë–≥–∫–æ–π –º–æ—Ä–æ—Å—å—é",
	231: "–ì—Ä–æ–∑–∞ –º–æ—Ä–æ—Å—å—é", 232: "–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω–æ–π –º–æ—Ä–æ—Å—å—é",

	300: "–õ—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å", 301: "–ú–æ—Ä–æ—Å—å", 302: "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
	310: "–õ—ë–≥–∫–∏–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å", 311: "–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å", 312: "–°–∏–ª—å–Ω—ã–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å",
	313: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å —Å –º–æ—Ä–æ—Å—å—é", 314: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏–≤–µ–Ω—å —Å –º–æ—Ä–æ—Å—å—é", 321: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å",

	500: "–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å", 501: "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å", 502: "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
	503: "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å", 504: "–õ–∏–≤–µ–Ω—å", 511: "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
	520: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª—ë–≥–∫–∏–π –¥–æ–∂–¥—å", 521: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å", 522: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏–≤–µ–Ω—å",
	531: "–ú–µ—Å—Ç–∞–º–∏ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",

	600: "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥", 601: "–°–Ω–µ–≥", 602: "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
	611: "–ú–æ–∫—Ä—ã–π —Å–Ω–µ–≥", 612: "–õ—ë–≥–∫–∏–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥", 613: "–°–∏–ª—å–Ω—ã–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥",
	615: "–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º", 616: "–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º", 620: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
	621: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–Ω–µ–≥", 622: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",

	701: "–¢—É–º–∞–Ω", 711: "–î—ã–º–∫–∞", 721: "–õ—ë–≥–∫–∏–π —Ç—É–º–∞–Ω", 731: "–ü–µ—Å—á–∞–Ω–∞—è –±—É—Ä—è",
	741: "–°–∏–ª—å–Ω—ã–π —Ç—É–º–∞–Ω", 751: "–ü–µ—Å–æ–∫", 761: "–ü—ã–ª—å", 762: "–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–µ–ø–µ–ª",
	771: "–®–∫–≤–∞–ª", 781: "–¢–æ—Ä–Ω–∞–¥–æ",

	800: "–Ø—Å–Ω–æ",
	801: "–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", 802: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", 803: "–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏", 804: "–ü–∞—Å–º—É—Ä–Ω–æ",
}

var weatherPriority = map[int]int{
	200: 6, 201: 6, 202: 6, 210: 6, 211: 6, 212: 6, 221: 6, 230: 6, 231: 6, 232: 6, // –ì—Ä–æ–∑–∞ ‚ö°
	300: 5, 301: 5, 302: 5, 310: 5, 311: 5, 312: 5, 313: 5, 314: 5, 321: 5, // –ú–æ—Ä–æ—Å—å üå´
	500: 4, 501: 4, 502: 4, 503: 4, 504: 4, 511: 4, 520: 4, 521: 4, 522: 4, 531: 4, // –î–æ–∂–¥—å üåß
	600: 3, 601: 3, 602: 3, 611: 3, 612: 3, 613: 3, 615: 3, 616: 3, 620: 3, 621: 3, 622: 3, // –°–Ω–µ–≥ ‚ùÑ
	701: 2, 711: 2, 721: 2, 731: 2, 741: 2, 751: 2, 761: 2, 762: 2, 771: 2, 781: 2, // –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è üå™
	800: 1, 801: 2, 802: 2, 803: 2, 804: 2, // –û–±–ª–∞—á–Ω–æ—Å—Ç—å ‚òÅ
}

func getDominantCondition(weatherList map[int]int) (string, int) {

	var dominantID int
	maxCount := 0
	maxPriority := 0

	for id, cnt := range weatherList {
		priority := weatherPriority[id]

		if cnt > maxCount || (cnt == maxCount && priority > maxPriority) {
			dominantID = id
			maxCount = cnt
			maxPriority = priority
		}
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
	if description, exists := weatherMapping[dominantID]; exists {
		return description, dominantID
	}

	return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞", 0
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
func calculateSummary(data []openweathermap.Forecast5WeatherList, hours []int) models.WeatherSummary {
	var tempSum, feelsLikeSum, windSum float64
	var count int
	weatherCount := make(map[int]int)

	for _, item := range data {
		hour := time.Unix(int64(item.Dt), 0).UTC().Hour()
		if contains(hours, hour) {
			tempSum += item.Main.Temp
			feelsLikeSum += item.Main.FeelsLike
			windSum += item.Wind.Speed
			count++

			// –ü–æ–¥—Å—á—ë—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π –ø–æ–≥–æ–¥—ã
			weatherCondition := item.Weather[0].ID
			weatherCount[weatherCondition]++
		}
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é —á–∞—Å—Ç—É—é –ø–æ–≥–æ–¥—É
	dominantCondition, idCondition := getDominantCondition(weatherCount)

	if count == 0 {
		return models.WeatherSummary{} // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	}

	return models.WeatherSummary{
		Temperature: tempSum / float64(count),
		FeelsLike:   feelsLikeSum / float64(count),
		WindSpeed:   windSum / float64(count),
		Condition:   dominantCondition,
		ConditionId: idCondition,
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ª–∞–π—Å–µ
func contains(slice []int, value int) bool {
	for _, v := range slice {
		if v == value {
			return true
		}
	}
	return false
}
