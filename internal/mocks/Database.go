// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "weather-bot/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// CleanupOldWeatherData provides a mock function with no fields
func (_m *Database) CleanupOldWeatherData() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CleanupOldWeatherData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCities provides a mock function with given fields: _a0
func (_m *Database) GetCities(_a0 string) ([]models.City, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCities")
	}

	var r0 []models.City
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.City, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []models.City); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.City)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCitiesIds provides a mock function with no fields
func (_m *Database) GetCitiesIds() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCitiesIds")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCitiesNames provides a mock function with no fields
func (_m *Database) GetCitiesNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCitiesNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0
func (_m *Database) GetUser(_a0 int64) (*models.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeather provides a mock function with given fields: _a0
func (_m *Database) GetWeather(_a0 int) (*models.ProcessedForecast, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 *models.ProcessedForecast
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.ProcessedForecast, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *models.ProcessedForecast); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProcessedForecast)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCity provides a mock function with given fields: _a0
func (_m *Database) SaveCity(_a0 models.City) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveCity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.City) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: _a0
func (_m *Database) SaveUser(_a0 *models.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveWeather provides a mock function with given fields: _a0, _a1
func (_m *Database) SaveWeather(_a0 int, _a1 *models.ProcessedForecast) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveWeather")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *models.ProcessedForecast) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
