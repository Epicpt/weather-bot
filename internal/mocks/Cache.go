// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "weather-bot/internal/models"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/redis/go-redis/v9"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// GetCities provides a mock function with given fields: _a0
func (_m *Cache) GetCities(_a0 string) ([]models.City, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCities")
	}

	var r0 []models.City
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.City, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []models.City); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.City)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCitiesIds provides a mock function with no fields
func (_m *Cache) GetCitiesIds() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCitiesIds")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCitiesNames provides a mock function with no fields
func (_m *Cache) GetCitiesNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCitiesNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScheduleUserNotifications provides a mock function with no fields
func (_m *Cache) GetScheduleUserNotifications() ([]redis.XStream, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScheduleUserNotifications")
	}

	var r0 []redis.XStream
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]redis.XStream, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []redis.XStream); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redis.XStream)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScheduleWeatherUpdate provides a mock function with no fields
func (_m *Cache) GetScheduleWeatherUpdate() ([]redis.XStream, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScheduleWeatherUpdate")
	}

	var r0 []redis.XStream
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]redis.XStream, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []redis.XStream); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redis.XStream)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0
func (_m *Cache) GetUser(_a0 int64) (*models.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserNotificationTime provides a mock function with given fields: _a0
func (_m *Cache) GetUserNotificationTime(_a0 int64) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserNotificationTime")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeather provides a mock function with given fields: _a0
func (_m *Cache) GetWeather(_a0 int) (*models.ProcessedForecast, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 *models.ProcessedForecast
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.ProcessedForecast, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *models.ProcessedForecast); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProcessedForecast)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with no fields
func (_m *Cache) HealthCheck() {
	_m.Called()
}

// IsHealthy provides a mock function with no fields
func (_m *Cache) IsHealthy() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveUserNotification provides a mock function with given fields: _a0
func (_m *Cache) RemoveUserNotification(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveWeatherUpdate provides a mock function with no fields
func (_m *Cache) RemoveWeatherUpdate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoveWeatherUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCity provides a mock function with given fields: _a0
func (_m *Cache) SaveCity(_a0 models.City) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveCity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.City) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: _a0
func (_m *Cache) SaveUser(_a0 *models.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveWeather provides a mock function with given fields: _a0, _a1
func (_m *Cache) SaveWeather(_a0 int, _a1 *models.ProcessedForecast) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveWeather")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *models.ProcessedForecast) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleUserNotification provides a mock function with given fields: _a0, _a1
func (_m *Cache) ScheduleUserNotification(_a0 int64, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleUserNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleWeatherUpdate provides a mock function with given fields: _a0
func (_m *Cache) ScheduleWeatherUpdate(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleWeatherUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
